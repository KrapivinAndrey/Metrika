Функция ПрочитатьJSONВручную(СтрокаJSON)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Результат  = ЧтениеJSON.Прочитать();
	
	Возврат Результат
	
КонецФункции

Функция ЗаписатьJSONВручную(Данные)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);
	Результат  = ЗаписьJSON.Закрыть();
	
	Возврат Результат
	
КонецФункции



//ПЕРЕОПРЕДЕЛЯЕМЫЕ {

// Отправка запроса к сервису
//
// Параметры
//  АдресЗапроса  - Строка - адрес, куда отправить запрос
//  ТелоЗапроса  - Строка - данные для отправки
//
// Возвращаемое значение:
//   Структура   - поле Успешно - данные отправлены на сайт, поле Данные - ответ сайта, поле ДанныеОбОшибке - результат функции ИнформацияОбОшибке
//
Функция Метрика_ОтправитьHTTPЗапрос(АдресЗапроса, ТелоЗапроса = "")
	Результат				= Новый Структура("Успешно, Данные, ДанныеОбОшибке", 
												Ложь, 
												"",
												"");
												
	Если Метрика_ИзвлечьИзВХ("ОтправкаЗапрещена") = Истина Тогда
		Результат.Успешно	= Истина;
		Результат.Данные	= "Отправка запрещена";
		
		Возврат Результат;
	КонецЕсли;
	
	СоединениеКМ = Новый HTTPСоединение(ПараметрыКлиентСерверМетрика.URLАдреса.ТестовыйСервер
										,
										,
										,
										,
										,
										,
										НОвый ЗащищенноеСоединениеOpenSSL);
	
	
	HTTPЗапрос				= Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = АдресЗапроса;
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "CESU-8");
	
	Попытка
		HTTPОтвет					= СоединениеКМ.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		Результат.Успешно			= Ложь;
		Результат.ДанныеОбОшибке	= ИнформацияОбОшибке();
		
		Возврат Результат;
	КонецПопытки;
	
	Результат.Успешно				= (HTTPОтвет.КодСостояния = 200);
	Ответ 							= HTTPОтвет.ПолучитьТелоКакСтроку();
	Если не ПустаяСтрока(Ответ) Тогда
		Результат.Данные			= Ответ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОтправитьHTTPЗапрос()

Функция ПолучитьНомерРелиза_ЧегоНибудь()

	Возврат "1.2.3.4b"

КонецФункции // ПолучитьНомерРелиза_ЧегоНибудь()

//} ПЕРЕОПРЕДЕЛЯЕМЫЕ


//ВСПОМОГАТЕЛЬНЫЕ {

// Приводит указанную дату к формату ISO8601 
// 2017-01-01T00:00:00Z (часовой пояс UTC+00)
// Параметры
//  ДатаВремя  - Дата - дата, которую надо преобразовать
//
// Возвращаемое значение:
//   Строка   - результат преобразования
//
Функция ДатаВФормате_ISO8601(ДатаВремя)
	
	ФорматнаяСтрока = "ДФ=yyyy-MM-ddTHH:mm:ss+00:00";
	Возврат Формат(ДатаВремя, ФорматнаяСтрока);
	
КонецФункции // ДатаВФормате_ISO8601()

// За эту функцию спасибо ребятам, которые пишут библиотеку xUnitFor1C
// https://github.com/xDrivenDevelopment/xUnitFor1C
//
// Универсальная функция для проверки наличия 
// свойств у значения любого типа данных
// Переменные:
// 1. Переменная - переменная любого типа, 
// для которой необходимо проверить наличие свойства
// 2. ИмяСвойства - переменная типа "Строка", 
// содержащая искомое свойства
// 
Функция ПеременнаяСодержитСвойство(Переменная, ИмяСвойства) Экспорт
     // Инициализируем структуру для теста 
     // с ключом (значение переменной "ИмяСвойства") 
     // и значением произвольного GUID'а
     GUIDПроверка = Новый УникальныйИдентификатор;
     СтруктураПроверка = Новый Структура;
     СтруктураПроверка.Вставить(ИмяСвойства, GUIDПроверка);
     // Заполняем созданную структуру из переданного 
     // значения переменной
     ЗаполнитьЗначенияСвойств(СтруктураПроверка, Переменная);
     // Если значение для свойства структуры осталось 
     // NULL, то искомое свойство не найдено, 
     // и наоборот.
     Если СтруктураПроверка[ИмяСвойства] = GUIDПроверка Тогда
          Возврат Ложь;
     Иначе
          Возврат Истина;
     КонецЕсли;
КонецФункции

Функция Метрика_НовыйУИД()
	
	Возврат Строка(Новый УникальныйИдентификатор);
	
КонецФункции

//} ВСПОМОГАТЕЛЬНЫЕ


// РАБОТА СО ВРЕМЕННЫМ ХРАНИЛИЩЕМ {

Функция Метрика_ИзвлечьИзВХ(Имя) Экспорт
	
	АдресВХ = ПараметрыКлиентСерверМетрика.АдресаВХ[Имя];
	
	Если Не ЭтоАдресВременногоХранилища(АдресВХ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолучитьИзВременногоХранилища(АдресВХ);
			
КонецФункции

Процедура Метрика_ПоместитьВоВХ(Имя,Значение) Экспорт
	
	ПоместитьВоВременноеХранилище(Значение, ПараметрыКлиентСерверМетрика.АдресаВХ[Имя]);
				
КонецПроцедуры

//} РАБОТА СО ВРЕМЕННЫМ ХРАНИЛИЩЕМ

// Ключевая функция. Принимает в себя метрику заполненную пользователем. Дозаполняет поля
//
// Параметры:
//  ГотоваяМетрика  - Структура - подготовленная пользователем метрика
//
// Возвращаемое значение:
//   Структура   - дозаполненная метрика, готовая к отправке
//
Функция Метрика_ПроверитьИДозаполнить(ГотоваяМетрика) Экспорт
	
	Метрика = Новый Соответствие;
	Метрика.Вставить("Id"			   	 , Метрика_НовыйУИД());
	Метрика.Вставить("ClientInstanceId"	 , ГотоваяМетрика["ClientInstanceId"]);
	Метрика.Вставить("Time"			   	 , Метрика_ПодготовитьВремя(ГотоваяМетрика["Time"]));
	Метрика.Вставить("Path"			   	 , Метрика_ПодготовитьСоставСобытия(ГотоваяМетрика["Path"]));
	Метрика.Вставить("TraceID"			 , ГотоваяМетрика["TraceID"]);
	Метрика.Вставить("Session"		   	 , Метрика_ПодготовитьСессию(ГотоваяМетрика["Session"]));
	Метрика.Вставить("AppContext"		 , ГотоваяМетрика["AppContext"]);	
	Метрика.Вставить("Variables"		 , Метрика_ПодготовитьПеременные(ГотоваяМетрика["Variables"]));
	
	ДолжныБытьНеПустые = Новый Массив;
	ДолжныБытьНеПустые.Добавить("Session");
	ДолжныБытьНеПустые.Добавить("AppContext");
	ДолжныБытьНеПустые.Добавить("Variables");
	ДолжныБытьНеПустые.Добавить("TraceID");
	
	Для Каждого Поле из ДолжныБытьНеПустые Цикл
		Если Метрика[Поле] = Неопределено Тогда
			Метрика.Удалить(Поле);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Метрика;
	
КонецФункции // Метрика_ПроверитьИДозаполнить()

// ФУНКЦИИ ПРИВЕДЕНИЯ ПОЛЕЙ К ФОРМАТУ ОТПРАВКИ {
Функция Метрика_ПодготовитьВремя(ПеременнаяМоментВремени)
	
	Если ПеременнаяМоментВремени = Неопределено Тогда
		ПеременнаяМоментВремени = Новый Соответствие;
	КонецЕсли;
	
	Возврат Метрика_НовыйМоментВремени(ПеременнаяМоментВремени["ClientTime"], 
										ПеременнаяМоментВремени["SendFromClientTime"]);
	
КонецФункции

Функция Метрика_ПодготовитьПеременные(Переменные)
	Variables = Неопределено;
	Если Переменные <> Неопределено Тогда	
		
		Variables = Новый Соответствие;
		
		Для Каждого Элемент Из Переменные Цикл
			Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Variables.Вставить(Элемент.Ключ, Метрика_СформироватьСтруктуруОписанияЗначения(Элемент.Значение));
					
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Variables;
КонецФункции

Функция Метрика_ПодготовитьСессию(ПеременнаяСессия)
	Если ПеременнаяСессия = Неопределено Тогда
		ПеременнаяСессия = Новый Соответствие;
	КонецЕсли;
	ПеременнаяСессия.Вставить("CustomSessionID", ПараметрыКлиентСерверМетрика.ИдентификаторСессии);
	
	Возврат Метрика_НовыйСессия(ПеременнаяСессия["CustomSessionID"]);
	
КонецФункции
								
Функция Метрика_ПодготовитьСоставСобытия(ПеременнаяСобытие)

	Если ПеременнаяСобытие = Неопределено Тогда
		ПеременнаяСобытие = Новый Соответствие;
	КонецЕсли;
	
	Возврат Метрика_НовыйСобытие(ПеременнаяСобытие["Category"], 
									ПеременнаяСобытие["Action"],
									ПеременнаяСобытие["Label"],
									ПеременнаяСобытие["View"])

КонецФункции // Метрика_ПодготовитьСоставСобытия()

//} ФУНКЦИИ ПРИВЕДЕНИЯ ПОЛЕЙ К ФОРМАТУ ОТПРАВКИ 
								
//ИНИЦИАЛИЗАЦИЯ

// Выполняется инициализация основных параметров для работы с метриками
//
// Параметры:
//  ОсновнаяФорма  - Неопределено, Форма - основная форма обработки. Для обычных форм - неопределено
//
// Возвращаемое значение:
//   Структура   - структура всех параметров метрики
//
Функция Метрика_ИнициализироватьПараметрыКлиентСервер(ОсновнаяФорма = Неопределено) Экспорт
	
	ПараметрыКлиентСерверМетрика = Новый Структура;
	ПараметрыКлиентСерверМетрика.Вставить("АдресаВХ");
	
	ПараметрыКлиентСерверМетрика.Вставить("URLАдреса");
	ПараметрыКлиентСерверМетрика.Вставить("ПутьКФормам");
	
	ПараметрыКлиентСерверМетрика.Вставить("ИдентификаторКлиента");
	ПараметрыКлиентСерверМетрика.Вставить("ИдентификаторСессии");
	
	ПараметрыКлиентСерверМетрика.Вставить("КонтекстПриложенияСервер");
	ПараметрыКлиентСерверМетрика.Вставить("КонтекстПриложенияКлиент");
	
	УникальныйИдентификатор	= ПолучитьУникальныйИдентификаторДляВХ(ОсновнаяФорма);
	
	АдресаВХ = Новый Структура;
	АдресаВХ.Вставить("СтекСобытий"	,						ПоместитьВоВременноеХранилище(Новый Массив,			УникальныйИдентификатор)); 			//сюда стек событий
	//Почему в ВХ? Потому что надо будет обрабатывать параметр ПараметрЗапуска, а он доступен только на клиенте
	//Бесконтекстным вызовом отправим
	АдресаВХ.Вставить("ОтправкаЗапрещена",					ПоместитьВоВременноеХранилище(Ложь,					УникальныйИдентификатор)); 			//не будем отправлять данные в метрику
																																					//ВАЖНО! Для корректности тестирования данные будут
																																					//собираться, но не будут отправляться.
																																					//Проверка надо отправлять или нет
																																					//будет в финальных методах Отправить и ОтправитьСтекСобытий
	ПараметрыКлиентСерверМетрика.АдресаВХ					= АдресаВХ;
	
	ПараметрыКлиентСерверМетрика.URLАдреса					= Метрика_URLАдреса();
	ПараметрыКлиентСерверМетрика.ПутьКФормам				= Метаданные().ПолноеИмя() + ".Форма.";
	
	ПараметрыКлиентСерверМетрика.ИдентификаторКлиента		= Строка(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
	ПараметрыКлиентСерверМетрика.ИдентификаторСессии		= Строка(УникальныйИдентификатор);
	
	ПараметрыКлиентСерверМетрика.КонтекстПриложенияСервер	= Метрика_СформироватьКонтекстПриложенияСервер();
	
	Возврат ПараметрыКлиентСерверМетрика;
	
КонецФункции // Метрика_ИнициализироватьПараметрыКлиентСервер()

Функция Метрика_СформироватьКонтекстПриложенияСервер()
	
	AppVersion 					= Метрика_ПреобразоватьВерсиюВСемантик(ПолучитьНомерРелиза_ЧегоНибудь()); 
	КП_Браузер 					= Неопределено; 
	КП_АппаратноеОбеспечение 	= Метрика_НовыйКонтекстПриложенияАппаратноеОбеспечение(); 
	КП_ОС 						= Метрика_НовыйКонтекстПриложенияОС(); 
	КП_Платформа 				= Метрика_НовыйКонтекстПриложенияПлатформа();
	
	Возврат Метрика_НовыйКонтекстПриложения(AppVersion, 
											КП_Браузер, 
											КП_АппаратноеОбеспечение, 
											КП_ОС, 
											КП_Платформа);
	
КонецФункции

Функция Метрика_СформироватьСессиюEDI()
		
	//Возврат Метрика_НовыйСессияEDI(ПараметрыПользователяEDI.GLN_Подразделения, ПараметрыПользователяEDI.Логин);
	// Возврат Неопределено;
	
КонецФункции

Функция Метрика_URLАдреса() Экспорт
	
	Результат = Новый Структура;
	       
	Результат.Вставить("ТестовыйСервер",	"api.dev.kontur");
	Результат.Вставить("БоевойСервер",		"api.kontur.ru");
	
	Топики = Метрика_Топики();
	
	Для Каждого ИмяТопика Из Топики Цикл
		Результат.Вставить(ИмяТопика, Метрика_АдресДляОтправкиДанныхОСобытии(ИмяТопика)); 
		//https://git.skbkontur.ru/1c/KMetrika/blob/master/README.MD
	КонецЦикла;
	
	Возврат Результат;
	                                                  
КонецФункции

Функция Метрика_Топики() Экспорт
	
	Топики = Новый Массив;
	Топики.Добавить("Behavior");
	Топики.Добавить("Log");
	Топики.Добавить("Health");
	Топики.Добавить("Feedback");
	Топики.Добавить("Statistics");
	
	Возврат Топики;

КонецФункции

Функция ПолучитьУникальныйИдентификаторДляВХ(ОсновнаяФорма) Экспорт
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	
	Если ТипЗнч(ОсновнаяФорма) = Тип("УправляемаяФорма") Тогда
		УникальныйИдентификатор = ОсновнаяФорма.УникальныйИдентификатор;
	КонецЕсли;
	
	Возврат УникальныйИдентификатор;
	
КонецФункции

//ОСНОВНЫЕ ПРОЦЕДУРЫ/ФУНКЦИИ РАБОТЫ С МЕТРИКОЙ

// Отправляет данные напрямую в Метрика
//
// Параметры:
//  Событие	- Соответствие, Событие - Метрика описанная через объектную модель
//  Топик	- Строка				- топик, в который надо отправить событие
//
Функция Метрика_ОтправитьСобытие(Метрика_Событие, Топик = "Behavior") Экспорт

	Результат	= Новый Массив;
	Результат.Добавить(Метрика_ПроверитьИДозаполнить(Метрика_Событие));
	
	Данные				= ЗаписатьJSONВручную(Результат);
	РезультатОтправки 	= Метрика_ОтправитьHTTPЗапрос(ПараметрыКлиентСерверМетрика.URLАдреса[Топик], Данные);
	
	Возврат РезультатОтправки;

КонецФункции // Метрка_ОтправитьСобытие()

// Отправляет пакет данных напрямую в Метрика
//
// Параметры:
//  ПакетСобытий	- Массив 	- массив событий для отправки. 
//									События должны принадлежать одному топику
//  Топик			- Строка	- топик, в который надо отправить событие
//
Функция Метрика_ОтправитьПакетСобытий(ПакетСобытий, Топик) Экспорт
	Если ПакетСобытий.Количество() = 0 Тогда //пустой пакет
		Возврат Новый Структура("Данные, Успешно", "Пустой пакет", Истина);
	КонецЕсли;

	Результат	= Метрика_ПроверитьИДозаполнитьПакет(ПакетСобытий);
	
	Данные				= ЗаписатьJSONВручную(Результат);
	РезультатОтправки 	= Метрика_ОтправитьHTTPЗапрос(ПараметрыКлиентСерверМетрика.URLАдреса[Топик], Данные);
	
	Возврат РезультатОтправки;

КонецФункции // Метрка_ОтправитьСобытие()

// Отправляет пакет данных напрямую в Метрика отдельно по событиям
//
// Параметры:
//  ПакетСобытий	- Массив 	- массив событий для отправки. 
//									События должны принадлежать одному топику
//  Топик			- Строка	- топик, в который надо отправить событие
//
Функция Метрика_ОтправитьПакетСобытийРаздельно(ПакетСобытий, Топик) Экспорт
	Если ПакетСобытий.Количество() = 0 Тогда //пустой пакет
		Возврат Истина;
	КонецЕсли;
	
	ЕстьОшибка = Ложь;
	Для каждого Событие Из ПакетСобытий Цикл
		РезультатОтправки = Метрика_ОтправитьСобытие(Событие, Топик);
		ЕстьОшибка = ЕстьОшибка 
					Или НЕ РезультатОтправки.Успешно;
	КонецЦикла;
	
	Возврат НЕ ЕстьОшибка;
	
КонецФункции // Метрка_ОтправитьСобытие()

Функция Метрика_ПроверитьИДозаполнитьПакет(Знач Метрика_ПакетСобытий)
	
	МассивПроверенных = Новый Массив;
	
	Для каждого Событие Из Метрика_ПакетСобытий Цикл
		МассивПроверенных.Добавить(Метрика_ПроверитьИДозаполнить(Событие));
	КонецЦикла;
	
	Возврат МассивПроверенных;	
	
КонецФункции

// Вместо отправки, аккумулирует события в стек, для пакетной отправкиш
//
// Параметры:
//  Метрика		- Соответствие - подготовленная пользователем метрика
//  Топик		- Строка - топик, к которому относиться метрика
//
// Возвращаемое значение:
//   Число		- количество событий, помещенных в стек
//
Функция Метрика_ПоместитьСобытиеВСтек(Метрика, Топик) Экспорт
	
	СтекСобытий = Метрика_ИзвлечьИзВХ("СтекСобытий");
	Если СтекСобытий = Неопределено Тогда
		СтекСобытий = Новый Массив;
	КонецЕсли;
	
	СтекСобытий.Добавить(Новый Структура("Топик, Метрика", 
											Топик, 
											Метрика));
	
	Метрика_ПоместитьВоВХ("СтекСобытий", СтекСобытий);
	
	Возврат СтекСобытий.Количество();
	
КонецФункции // Метрика_ПоместитьСобытиеВСтек()

// Пакетная отправка событий в метрику
//
// Параметры:
//  СтекСобытийКлиент	- массив - массив подготовленных метрик с клиента
//
// Возвращаемое значение:
//   Булево   - признак удачной отправки
//
Функция Метрика_ОтправитьВсеСобытияСтека(СтекСобытийКлиент = Неопределено) Экспорт
	
	ЕстьОшибка = Ложь;
	
	СтекСобытий = Метрика_ИзвлечьИзВХ("СтекСобытий");
	
	Если НЕ ЗначениеЗаполнено(СтекСобытий)
		И НЕ ЗначениеЗаполнено(СтекСобытийКлиент) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Метрика_ПоместитьВоВХ("СтекСобытий", Новый Массив);
	
	СобытияПоТопикам = Метрика_ПодготовитьСтруктуруДляПакетнойОтправкиСобытий();
	
	Если ЗначениеЗаполнено(СтекСобытий) Тогда
		Метрика_РазобратьСобытияПоТопикам(СобытияПоТопикам, СтекСобытий);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтекСобытийКлиент) Тогда
		Метрика_РазобратьСобытияПоТопикам(СобытияПоТопикам, СтекСобытийКлиент);
	КонецЕсли;
	
	Для каждого Эл Из СобытияПоТопикам Цикл
		ПакетСобытий 				= Эл.Значение;
		Топик 						= Эл.Ключ;
		
		Если Не ЗначениеЗаполнено(ПакетСобытий) Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатОтправкиПакета = Метрика_ОтправитьПакетСобытий(ПакетСобытий, Топик);
		Если НЕ РезультатОтправкиПакета.Успешно Тогда //если пакет не ушел целиком, отправим отдельно по событиям
			РезультатОтправкиПакета.Успешно = Метрика_ОтправитьПакетСобытийРаздельно(ПакетСобытий, Топик);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатОтправкиПакета;
	
КонецФункции // Метрика_ОтправитьВсеСобытияСтека()

Процедура Метрика_РазобратьСобытияПоТопикам(СобытияПоТопикам, Знач СтекСобытий)
	
	Для каждого Событие Из СтекСобытий Цикл
		Если СобытияПоТопикам[Событие.Топик] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СобытияПоТопикам[Событие.Топик].Добавить(Событие.Метрика);
	КонецЦикла;
	
КонецПроцедуры

Функция Метрика_ПодготовитьСтруктуруДляПакетнойОтправкиСобытий()
	
	СтруктураДляПакетнойОтправки = Новый Соответствие;
	Топики = Метрика_Топики();
	
	Для каждого ИмяТопика Из Топики Цикл
		СтруктураДляПакетнойОтправки.Вставить(ИмяТопика, Новый Массив);		
	КонецЦикла;
	
	Возврат СтруктураДляПакетнойОтправки;
	
КонецФункции

//ОБЕРТКИ

Процедура Метрика_ЗарегистрироватьСобытие(Топик,
											Событие, 
											TraceID = Неопределено, 
											Переменные = Неопределено, 
											ДобавитьСистемнуюИнформацию = Ложь,
											ОтправитьСразу = Ложь) Экспорт
										
	Если Событие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыКлиентСерверМетрика = Неопределено Тогда
		ПараметрыКлиентСерверМетрика = Метрика_ИнициализироватьПараметрыКлиентСервер();
	КонецЕсли;
		
	ИдентификаторКлиента 	= ПараметрыКлиентСерверМетрика.ИдентификаторКлиента; 
	МоментВремени			= Метрика_НовыйМоментВремениВозникновения(); 
	Сессия					= Метрика_НовыйСессия(ПараметрыКлиентСерверМетрика.ИдентификаторСессии); 

	КонтекстПриложения 		= ?(ДобавитьСистемнуюИнформацию, ПараметрыКлиентСерверМетрика.КонтекстПриложенияСервер, Неопределено);
	
	Метрика = Метрика_НовыйМетрика(ИдентификаторКлиента, 
									МоментВремени, 
									Событие, 
									TraceID,
									Сессия, 
									КонтекстПриложения, 
									Переменные);
										
	Если ОтправитьСразу Тогда
		Метрика_ОтправитьСобытие(Метрика, Топик);
	Иначе
		Метрика_ПоместитьСобытиеВСтек(Метрика, Топик);
	КонецЕсли;	
		
КонецПроцедуры

Функция Метрика_НачатьЗамер(TraceID = Неопределено,
							Категория = Неопределено,
							Представление = "МодульОбъекта",
							Метка = Неопределено,
							Переменные = Неопределено, 
							ДобавитьСистемнуюИнформацию = Ложь, 
							ОтправитьСразу = Ложь) Экспорт

	Событие = Метрика_НовыйСобытие(Категория, "start", Метка, Представление);
	
	Метрика_ЗарегистрироватьСобытие("Health",
									Событие, 
									TraceID, 
									Переменные, 
									ДобавитьСистемнуюИнформацию,
									ОтправитьСразу);
	
	Возврат TraceID;

КонецФункции // НачатьЗамерПроизводительности()

Процедура Метрика_ЗакончитьЗамер(TraceID = Неопределено, 
									Категория = Неопределено, 
									Представление = "МодульОбъекта",
									Метка = Неопределено,
									Переменные = Неопределено, 
									ДобавитьСистемнуюИнформацию = Ложь, 
									ОтправитьСразу = Ложь) Экспорт
	
	Событие = Метрика_НовыйСобытие(Категория, "finish", Метка, Представление);
	
	Метрика_ЗарегистрироватьСобытие("Health",
									Событие, 
									TraceID, 
									Переменные, 
									ДобавитьСистемнуюИнформацию,
									ОтправитьСразу);
	
КонецПроцедуры // Метрика_ЗакончитьЗамер()

// Аналог ЗаписьЖурналаРегистрации. Параметры имеют примерно тот же смысл.
//
// Параметры:
//  МестоОшибки  	- Строка		- Действие или имя метода 
//  Уровень			- Строка		- категория события: error, info
//	ОписаниеОшибки	- Строка		- результат ОписаниеОшибки()
//	Представление	- Структура		- имя формы, модуля
//	Переменные		- Структура		- произвольная информация
//	ОтправитьСразу	- Булево		- отправить сразу или положить в стек событий для отложенной отправки
//
Процедура Метрика_ЗаписьЖурнала(МестоОшибки,
										Уровень, 
										ОписаниеОшибки, 
										Представление = "МодульОбъекта",
										Переменные = Неопределено,
										ОтправитьСразу = Ложь) Экспорт
							
	Событие = Метрика_НовыйСобытие(МестоОшибки, Уровень, ОписаниеОшибки, Представление);
	
	Метрика_ЗарегистрироватьСобытие("Log",
									Событие, 
									Неопределено, 
									Переменные, 
									Истина,
									ОтправитьСразу);

КонецПроцедуры

//ИЗ ГЛОБАЛЬНЫХ МОДУЛЕЙ

// Адрес на который надо отправлять данные для фиксации в метрике.
//
//
// Возвращаемое значение:
//   Строка   - полный адрес
//
Функция Метрика_АдресДляОтправкиДанныхОСобытии(topic)

	Возврат "/metrika-pipe/v1/sources/1CModule/topics/" + Метрика_Модуль() + "_" + topic + "/events";

КонецФункции // АдресДляОтправкиДанныхОСобытии()

// Для какого модуля собираются метрики
//
// Возвращаемое значение:
//   Строка   - имя модуля EDI, Mercury, Sverka, Focus, Extern, DD
//
Функция Метрика_Модуль()
	Возврат "Focus";
КонецФункции // Метрика_Модуль()

Функция Метрика_ТиповаяСтруктураМетрики() Экспорт
	
	СтруктураСобытия = Новый Соответствие;
	
	//Обязательные поля
	
	СтруктураСобытия.Вставить("Id", 					Метрика_НовыйУИД());
	СтруктураСобытия.Вставить("ClientInstanceId");
	СтруктураСобытия.Вставить("Time");
	СтруктураСобытия.Вставить("Path");
	СтруктураСобытия.Вставить("Variables");
	СтруктураСобытия.Вставить("Session", 				Метрика_НовыйСессия(ПараметрыКлиентСерверМетрика.ИдентификаторСессии));
																			//,,,,
																			//ПараметрыКлиентСерверМетрика.СессияEDI));
	СтруктураСобытия.Вставить("TraceId");
	СтруктураСобытия.Вставить("AppContext");
	
	СтруктураСобытия.Вставить("Topic"); //Этого поля в структуре метрики нет, нужно для фиксации топипа
	
	Возврат СтруктураСобытия;
	
КонецФункции

Функция Метрика_ПреобразоватьВерсиюВСемантик(Знач Версия) Экспорт
	
	Если Не ЗначениеЗаполнено(Версия) Тогда
		Возврат "0.0.0";
	КонецЕсли;
	
	Версия 			= Строка(Версия);	
	МассивРазрядов 	= Метрика_РазложитьСтрокуВМассивСлов(Версия, "./");
	СемантикВерсия	= "";
	
	Сч = 0;
	Разделитель = "";
	ТекРазряд = "";
	Для каждого Разряд Из МассивРазрядов Цикл
		Сч = Сч + 1;
		Если Сч < 4 Тогда
			ТекРазряд = ?(Метрика_ТолькоЦифрыВСтроке(Разряд), Разряд, "0");
		Иначе
			ТекРазряд = СтрЗаменить(Разряд, " ", "");
		КонецЕсли;	
		СемантикВерсия = СемантикВерсия + Разделитель + ТекРазряд;
		Если Сч < 3 Тогда
			Разделитель = ".";
		ИначеЕсли Сч = 3 Тогда
			Разделитель = "-";
		Иначе
			Разделитель = "";
		КонецЕсли;
	КонецЦикла;
	
	Пока Сч < 3 Цикл
		СемантикВерсия = СемантикВерсия + ".0";
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат СемантикВерсия;
	
КонецФункции

Функция Метрика_РазложитьСтрокуВМассивСлов(Знач Строка, РазделителиСлов="") Экспорт
	
	Слова = Новый Массив;
	
	Если СтрДлина(РазделителиСлов) = 1 Тогда
		
		НайденныйСимвол = Найти(Строка,РазделителиСлов);
		Пока НайденныйСимвол>0 Цикл
			Слова.Добавить(Лев(Строка,НайденныйСимвол-1));
			Строка = Сред(Строка,НайденныйСимвол+1);
			НайденныйСимвол = Найти(Строка,РазделителиСлов);
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(Строка) Тогда
			Слова.Добавить(Строка);
		КонецЕсли;
		
	Иначе
		
		Для Сч = 1 По СтрДлина(РазделителиСлов) Цикл
			Строка = СтрЗаменить(Строка,Сред(РазделителиСлов,Сч,1),Символы.ПС);
		КонецЦикла;
		
		Для Сч=1 По СтрЧислоСтрок(Строка) Цикл
			ТекСлово = СокрЛП(СтрПолучитьСтроку(Строка,Сч));
			Если ТекСлово<>"" Тогда
				Слова.Добавить(ТекСлово);
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат Слова;
	
КонецФункции

Функция Метрика_ТолькоЦифрыВСтроке(СтрокаПроверки)
	
	Возврат СтрДлина(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
			СокрЛП(СтрокаПроверки), "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")
	) = 0;

КонецФункции

Функция Метрика_СформироватьСтруктуруОписанияЗначения(Значение) Экспорт
	
	Результат = Новый Структура("value, type");
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Результат.value = Формат(Значение, "ЧН=; ЧГ=");
		Результат.type	= "number";
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		Результат.value = Значение;
		Результат.type	= "string";
	ИначеЕсли ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Тогда
		Результат.value = Строка(Значение);
		Результат.type	= "uuid";
	ИначеЕсли ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
		Результат.value = Base64Строка(Значение);
		Результат.type	= "base64";
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		Результат.value = Формат(Значение, "БЛ=False; БИ=True");
		Результат.type	= "string";
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Результат.value = Формат(Значение, "ДЛФ=DT; ДП=");
		Результат.type	= "string";
	Иначе
		Попытка
			Результат.value = ЗаписатьJSONВручную(Значение);
			Результат.type	= "string";
		Исключение
			Результат.value = "convert_error";
			Результат.type	= "string";
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Метрика_НовыйМетрика(ClientInstanceId, 
								МоментВремени, 
								Событие, 
								TraceID				= Неопределено,
								Сессия				= Неопределено, 
								КонтекстПриложения 	= Неопределено, 
								Переменные 			= Неопределено) Экспорт
	
	Метрика = Новый Соответствие;
	Метрика.Вставить("Id"			   	 , Метрика_НовыйУИД());
	Метрика.Вставить("ClientInstanceId"	 , ClientInstanceId);
	Метрика.Вставить("Time"			   	 , МоментВремени);	
	Метрика.Вставить("Path"			   	 , Событие);
	Метрика.Вставить("TraceID"			 , Строка(TraceID));
	Метрика.Вставить("Session"		   	 , Сессия);
	Метрика.Вставить("AppContext"		 , КонтекстПриложения);	
		
	// Преобразовать Variables
	
	Метрика.Вставить("Variables", Переменные);
	
	// Капризная
	
	Если Сессия = Неопределено Тогда
		Метрика.Удалить("Session");			
	КонецЕсли;
	
	Если КонтекстПриложения = Неопределено Тогда
		Метрика.Удалить("AppContext");			
	КонецЕсли;
	
	Если Переменные = Неопределено Тогда
		Метрика.Удалить("Variables");			
	КонецЕсли;
	
	Если TraceID = Неопределено Тогда
		Метрика.Удалить("TraceID");			
	КонецЕсли;	
	
	Возврат Метрика;
	
КонецФункции

//#Область Сессия

Функция Метрика_НовыйСессия(CustomSessionId) Экспорт
	
	Сессия = Новый Соответствие;	
	Сессия.Вставить("CustomSessionId",				CustomSessionId);	
	
	Возврат Сессия;
	
КонецФункции

//#КонецОбласти

//#Область Контекст_приложения
Функция Метрика_НовыйКонтекстПриложения(Знач AppVersion = Неопределено, 
										КП_Браузер = Неопределено, 
										КП_АппаратноеОбеспечение = Неопределено, 
										КП_ОС = Неопределено, 
										КП_Платформа = Неопределено) Экспорт
		
	КонтекстПриложения = Новый Соответствие;
	КонтекстПриложения.Вставить("AppVersion", AppVersion);
	КонтекстПриложения.Вставить("Browser"	, КП_Браузер);
	КонтекстПриложения.Вставить("Hardware"	, КП_АппаратноеОбеспечение);
	КонтекстПриложения.Вставить("OS"		, КП_ОС);
	КонтекстПриложения.Вставить("Platform"	, КП_Платформа);
	
	Если AppVersion = Неопределено Тогда
		КонтекстПриложения.Удалить("AppVersion");	
	КонецЕсли;
	
	Если КП_Браузер = Неопределено Тогда
		КонтекстПриложения.Удалить("Browser");	
	КонецЕсли;
	
	Если КП_АппаратноеОбеспечение = Неопределено Тогда
		КонтекстПриложения.Удалить("Hardware");	
	КонецЕсли;

	Если КП_ОС = Неопределено Тогда
		КонтекстПриложения.Удалить("OS");	
	КонецЕсли;

	Если КП_Платформа = Неопределено Тогда
		КонтекстПриложения.Удалить("Platform");	
	КонецЕсли;
	
	Возврат КонтекстПриложения; 
	
КонецФункции

Функция Метрика_НовыйКонтекстПриложенияБраузер() Экспорт
	
	Перем UserAgent; 
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	UserAgent = СистемнаяИнформация.ИнформацияПрограммыПросмотра;
	
	//
	
	Если ПустаяСтрока(UserAgent) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	КП_Браузер = Новый Соответствие;
	КП_Браузер.Вставить("UserAgent", UserAgent);
	
	Возврат КП_Браузер; 
	
КонецФункции

Функция Метрика_НовыйКонтекстПриложенияАппаратноеОбеспечение() Экспорт
	
	Перем CoresCount, TotalMemoryGb;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	TotalMemoryGb = Окр(СистемнаяИнформация.ОперативнаяПамять / 1000);
	
	//
	
	КП_АппаратноеОбеспечение = Новый Соответствие;
	КП_АппаратноеОбеспечение.Вставить("TotalMemoryGb", TotalMemoryGb);
	//КП_АппаратноеОбеспечение.Вставить("CoresCount"	 , CoresCount);
	
	Возврат КП_АппаратноеОбеспечение; 
	
КонецФункции

Функция Метрика_НовыйКонтекстПриложенияОС() Экспорт
	
	Перем BitSet, Name, Version;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	СтрокаТипПлатформы  = НРег(СистемнаяИнформация.ТипПлатформы);	
	
	// 
	
	Если Найти(СтрокаТипПлатформы, "64") <> 0 Тогда
		BitSet = "x64";
	Иначе
		BitSet = "x86";	
	КонецЕсли;
	
	// 
	
	Если Найти(СтрокаТипПлатформы, НРег("Linux")) <> 0 Тогда
		Name = "Linux";
	ИначеЕсли Найти(СтрокаТипПлатформы, НРег("MacOS")) <> 0 Тогда
		Name = "MacOS";
	ИначеЕсли Найти(СтрокаТипПлатформы, НРег("Windows")) <> 0 Тогда	
		Name = "Windows";	
	КонецЕсли;	

	Version = "0.0.0";
	
	// С версией какие-то авантюры нужны
	
	КП_ОС = Новый Соответствие;
	КП_ОС.Вставить("BitSet"	, BitSet);
	КП_ОС.Вставить("Name"	, Name);
	КП_ОС.Вставить("Version", Version);
	
	Возврат КП_ОС; 
	
КонецФункции

Функция Метрика_НовыйКонтекстПриложенияПлатформа() Экспорт
	
	СистемнаяИнформация  = Новый СистемнаяИнформация;
	Name		  		 = "1С:Предприятие 8";
	Configuration 		 = Метаданные.Имя;
	ConfigurationVersion = Метаданные.Версия; 
	RunMode 	         = Строка(ТекущийРежимЗапуска());
	Version				 = СистемнаяИнформация.ВерсияПриложения;
	
	КП_Платформа = Новый Соответствие;
	КП_Платформа.Вставить("Name"				, Name);
	КП_Платформа.Вставить("Configuration"		, Configuration);
	КП_Платформа.Вставить("ConfigurationVersion", Метрика_ПреобразоватьВерсиюВСемантик(ConfigurationVersion));
	КП_Платформа.Вставить("RunMode"				, RunMode);
	КП_Платформа.Вставить("Version"				, Метрика_ПреобразоватьВерсиюВСемантик(Version));
	
	Возврат КП_Платформа; 
	
КонецФункции
//#КонецОбласти

Функция Метрика_НовыйСобытие(Знач Category = Неопределено, 
								Знач Action = Неопределено, 
								Знач Label = Неопределено, 
								Знач View = Неопределено) Экспорт
		
	Событие = Новый Соответствие;
	Событие.Вставить("Category"	, Category);
	Событие.Вставить("Action"	, Action);
	
	Если ЗначениеЗаполнено(View) Тогда
		Событие.Вставить("View"	, View);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Label) Тогда
		Событие.Вставить("Label", Label);
	КонецЕсли;
	
	Возврат Событие;
	
КонецФункции

Функция Метрика_НовыйМоментВремени(Знач ClientTime = Неопределено, Знач SendFromClientTime = Неопределено) Экспорт
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		
	Если ClientTime = Неопределено Тогда
		ClientTime = ТекущаяДатаСеанса;
	КонецЕсли;
	
	Если SendFromClientTime = Неопределено Тогда
		SendFromClientTime = ТекущаяДатаСеанса;	
	КонецЕсли;	
	
	МоментВремени = Новый Соответствие;
	МоментВремени.Вставить("ClientTime"		   , ДатаВФормате_ISO8601(УниверсальноеВремя(ClientTime)));
	МоментВремени.Вставить("SendFromClientTime", ДатаВФормате_ISO8601(УниверсальноеВремя(SendFromClientTime)));
	
	Возврат МоментВремени;
	
КонецФункции

Функция Метрика_НовыйМоментВремениВозникновения() Экспорт
	
	МоментВремени = Новый Соответствие;
	МоментВремени.Вставить("ClientTime", ТекущаяДатаСеанса());
	
	Возврат МоментВремени;
	
КонецФункции


//-------------------------------------------------------
// 
// ЛОГИРОВАНИЕ
//

Процедура ЛогОтладка(Шаблон,
									Параметр1 = Неопределено,
									Параметр2 = Неопределено,
									Параметр3 = Неопределено,
									Параметр4 = Неопределено,
									Параметр5 = Неопределено,
									Параметр6 = Неопределено,
									Параметр7 = Неопределено,
									Параметр8 = Неопределено,
									Параметр9 = Неопределено)
									
	Параметры = Новый Массив;
	Параметры.Добавить(Параметр1);
	Параметры.Добавить(Параметр2);
	Параметры.Добавить(Параметр3);
	Параметры.Добавить(Параметр4);
	Параметры.Добавить(Параметр5);
	Параметры.Добавить(Параметр6);
	Параметры.Добавить(Параметр7);
	Параметры.Добавить(Параметр8);
	Параметры.Добавить(Параметр9);

	Сообщить(ЗаписатьJSONВручную(РазобратьСтруктурнуюСтроку(Шаблон, Параметры)));

КонецПроцедуры

Функция РазобратьСтруктурнуюСтроку(Шаблон, Параметры)
									
									
	Результат = Новый Структура("Вывод", "");
	
	ИменаПараметров = ИзвлечьИменаПараметров(Шаблон);
    
    Если ИменаПараметров.Количество() > 9 Тогда
    
    	ВызватьИсключение "Слишком много параметров";
    
    КонецЕсли; 
    
    Вывод = Шаблон;    
    Для Сч = 0 По ИменаПараметров.Количество() - 1 Цикл
    
    	ИмяПараметра        = ИменаПараметров.Получить(Сч);
        ЗначениеПараметра   = Параметры[Сч];
        
        Вывод = СтрЗаменить(Вывод, "{{" + ИмяПараметра + "}}", ЗначениеПараметра);
		
        Результат.Вставить(ИмяПараметра, ЗначениеПараметра);
		
	КонецЦикла;
	
	Результат.Вывод = Вывод;
	
	Возврат Результат;
	
КонецФункции

Функция ИзвлечьИменаПараметров(Шаблон, ПараметрыПердыдущегоШага = Неопределено) Экспорт

	Если ПараметрыПердыдущегоШага = Неопределено Тогда
    
    	ПараметрыПердыдущегоШага = Новый Массив;
    
    КонецЕсли; 
    
    ПерваяПозиция = Найти(Шаблон, "{{");
    Если ПерваяПозиция =0 Тогда
    
    	Возврат ПараметрыПердыдущегоШага;
    
    КонецЕсли; 
    
    ВтораяПозиция = Найти(Шаблон, "}}");
    
    ИмяПараметра = СокрЛП( Сред(Шаблон, ПерваяПозиция + 2, ВтораяПозиция - ПерваяПозиция - 2));
    ПараметрыПердыдущегоШага.Добавить(ИмяПараметра);
    ИзвлечьИменаПараметров(Сред(Шаблон, ВтораяПозиция + 2), ПараметрыПердыдущегоШага);
    
    Возврат ПараметрыПердыдущегоШага;

КонецФункции // ИзвлечьИменаПараметров()


//-------------------------------------------------------
//
// РАБОТА С ИСКЛЮЧЕНИЯМИ
// 

// Подготавливает новое сообщение для ВызватьИсключение
//
// Параметры
//  ИнформацияОбОшибке  - ИнформацияОбОшибке - полученные данные об ошибке
//  СообщениеЛога  		- Строка - комментарий к ошибке
// Возвращаемое значение:
//   Строка   			- новое сообщения для вызыва исключения
//
Функция ПодготовитьСтруктурноеОписаниеОшибки(ИнформацияОбОшибке, СообщениеЛога = "") Экспорт
	
	Описание = ИнформацияОбОшибке.Описание;
	
	Если (Лев(Описание, 1) = "{" 
			И Прав(Описание, 1) = "}")
		ИЛИ (Лев(Описание, 1) = "[" 
			И Прав(Описание, 1) = "]") Тогда
			
		СтруктураОшибки = ПрочитатьJSONВручную(Описание);
		ДополнитьСообщениеОбОшибки(СтруктураОшибки[0], ИнформацияОбОшибке);
		
	Иначе
		
		СтруктураОшибки = Новый Массив;
		ЗаполнитьРекурсивноМассивОшибок(СтруктураОшибки, ИнформацияОбОшибке);
		
	КонецЕсли;
	
	СтруктураОшибки.Вставить(0, НовыйОписаниеОшибки(СообщениеЛога));
	Возврат ЗаписатьJSONВручную(СтруктураОшибки);
		
КонецФункции // ПодготовитьСтруктурноеОписаниеОшибки()

Процедура ДополнитьСообщениеОбОшибки(СтараяЗапись, ИнформацияОбошибке)
	
	ЗаполнитьЗначенияСвойств(СтараяЗапись, ИнформацияОбошибке, , "Описание");
	
КонецПроцедуры // ДополнитьСообщениеОбОшибки()

Процедура ЗаполнитьРекурсивноМассивОшибок(МассивОшибок, ИнформацияОбОшибке)

	Если ИнформацияОбОшибке = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МассивОшибок.Добавить(НовыйОписаниеОшибки(ИнформацияОбОшибке));
	ЗаполнитьРекурсивноМассивОшибок(МассивОшибок, ИнформацияОбОшибке.Причина);

КонецПроцедуры // ЗаполнитьРекурсивноМассивОшибок()


Функция НовыйОписаниеОшибки(Сообщение)

	Если ТипЗнч(Сообщение) = Тип("Строка") Тогда
	
		Результат = Новый Структура("ИмяМодуля, ИсходнаяСтрока, НомерСтроки, Описание", 
										"", 
										"",
										0,
										Сообщение);
										
	Иначе
		
		Результат = Новый Структура("ИмяМодуля, ИсходнаяСтрока, НомерСтроки, Описание", 
										Сообщение.ИмяМодуля, 
										Сообщение.ИсходнаяСтрока,
										Сообщение.НомерСтроки,
										Сообщение.Описание);
										
	КонецЕсли;
		
	Возврат Результат;

КонецФункции // НовыйОписаниеОбОшибке()

